plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.0'
    id 'io.spring.dependency-management' version '1.1.0'
}

group 'edu.productservice'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'

    // https://mvnrepository.com/artifact/com.google.code.gson/gson
    implementation group: 'com.google.code.gson', name: 'gson'

    // https://mvnrepository.com/artifact/org.java-websocket/Java-WebSocket
    //implementation group: 'org.java-websocket', name: 'Java-WebSocket'


    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:3.0.0'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc:3.0.0'
    implementation 'org.springframework.boot:spring-boot-starter-validation:3.0.0'
    implementation 'org.springframework.boot:spring-boot-starter-web:3.0.0'
    //implementation 'org.springframework.boot:spring-web:6.0.2'

    // https://mvnrepository.com/artifact/org.springframework/spring-web
    implementation group: 'org.springframework', name: 'spring-web', version: '6.0.3'

    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.14.1'

    // https://mvnrepository.com/artifact/com.rabbitmq/amqp-client
    implementation 'com.rabbitmq:amqp-client:5.16.0'

    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-amqp
    implementation 'org.springframework.boot:spring-boot-starter-amqp:3.0.1'

    //compileOnly 'org.projectlombok:lombok'
    // https://mvnrepository.com/artifact/org.projectlombok/lombok
    compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.24'
    // https://mvnrepository.com/artifact/org.postgresql/postgresql
    runtimeOnly group: 'org.postgresql', name: 'postgresql', version: '42.5.1'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test:3.0.0'
}

test {
    useJUnitPlatform()
}

task generateGraphBasedInterfaces(type: Exec) {
    workingDir rootProject.getProjectDir().getAbsolutePath() + "/graph-gen"
    commandLine "mvn", "graphwalker:generate-sources"
}
